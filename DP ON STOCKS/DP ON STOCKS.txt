#best time to  buy and sell stock 
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    int profit=0;
    int mini=prices[0];

    for(int i=1;i<prices.size();i++){
        int cost=prices[i]-mini;
        profit=max(profit,cost);
        mini=min(mini,prices[i]);
    }
    return profit;
}







#best time to buy and sell stock mem as many times
#include<bits/stdc++.h>
long f(int ind,int buy,long *prices,int n,vector<vector<long>>&dp){
    if(ind==n) return 0;
    long profit=0;
    if(dp[ind][buy]!=-1) return dp[ind][buy];
    if(buy==1){
      profit=max(-prices[ind]+f(ind+1,0,prices,n,dp),0+f(ind+1,1,prices,n,dp));
    }
    else{
      profit=max(prices[ind]+f(ind+1,1,prices,n,dp),0+f(ind+1,0,prices,n,dp));
    }
    return dp[ind][buy]=profit;
}
long getMaximumProfit(long *values, int n)
{
    vector<vector<long>>dp(n,vector<long>(2,-1));
    return f(0,1,values,n,dp);
}
    



#Best Time to Buy and Sell Stock III space
#include<bits/stdc++.h>
int maxProfit(vector<int>& prices)
{
    int n=prices.size();
    vector<vector<int>>after(2,vector<int>(3,0));
   vector<vector<int>>cur(2,vector<int>(3,0));
    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<=1;buy++){
           for(int cap=1;cap<=2;cap++){
             if(buy==1){
    cur[buy][cap]=max(-prices[ind]+after[0][cap],0+after[1][cap]);
    }
    else{
   cur[buy][cap]=max(prices[ind]+after[1][cap-1],0+after[0][cap]);
    }
            }
        }
        after=cur;
    }
    return after[1][2];
}



#Best Time to Buy and Sell Stock IV space
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices, int n, int k)
{
  vector<vector<int>>after(2,vector<int>(k+1,0));
   vector<vector<int>>cur(2,vector<int>(k+1,0));
    for(int ind=n-1;ind>=0;ind--){
        for(int buy=0;buy<=1;buy++){
           for(int cap=1;cap<=k;cap++){
             if(buy==1){
    cur[buy][cap]=max(-prices[ind]+after[0][cap],0+after[1][cap]);
    }
    else{
   cur[buy][cap]=max(prices[ind]+after[1][cap-1],0+after[0][cap]);
    }
            }
        }
        after=cur;
    }
    return after[1][k];
}





#Best Time to Buy and Sell Stock with Cooldown mem
#include<bits/stdc++.h>
int f(int ind,int buy,vector<int> &prices,int n,vector<vector<int>>&dp){
    if(ind>=n) return 0;
    int profit=0;
    if(dp[ind][buy]!=-1) return dp[ind][buy];
    if(buy==1){
      profit=max(-prices[ind]+f(ind+1,0,prices,n,dp),0+f(ind+1,1,prices,n,dp));
    }
    else{
      profit=max(prices[ind]+f(ind+2,1,prices,n,dp),0+f(ind+1,0,prices,n,dp));
    }
    return dp[ind][buy]=profit;
}
int stockProfit(vector<int> &prices){
    int n=prices.size();
   vector<vector<int>>dp(n,vector<int>(2,-1));
    return f(0,1,prices,n,dp);
}



#Best Time to Buy and Sell Stock with Transaction Fee mem
#include<bits/stdc++.h>
int f(int ind,int buy,int fee,vector<int> &prices,int n,vector<vector<int>>&dp){
    if(ind==n) return 0;
    int profit=0;
    if(dp[ind][buy]!=-1) return dp[ind][buy];
    if(buy==1){
      profit=max(-prices[ind]+f(ind+1,0,fee,prices,n,dp),0+f(ind+1,1,fee,prices,n,dp));
    }
    else{
      profit=max(prices[ind]-fee+f(ind+1,1,fee,prices,n,dp),0+f(ind+1,0,fee,prices,n,dp));
    }
    return dp[ind][buy]=profit;
}
int maximumProfit(vector<int> &prices, int n, int fee)
{
   vector<vector<int>>dp(n,vector<int>(2,-1));
    return f(0,1,fee,prices,n,dp);
}