#subsets sum equal to k  mem
#include <bits/stdc++.h> 
bool f(int ind,int target, vector<int> &arr,vector<vector<int>>&dp){
      if(target==0) return true;
      if(ind==0) return arr[0]==target;
      if(dp[ind][target]!=-1) return dp[ind][target];
      bool notpick=f(ind-1,target,arr,dp);
      bool pick=false;
      if (arr[ind] <= target) {
        pick = f(ind - 1, target - arr[ind], arr, dp);
      }
      return dp[ind][target]=pick || notpick;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
  vector<vector<int> >dp(n,vector<int>(k+1,-1));
  return f(n - 1, k, arr,dp);
}



#partition equal subset sum mem
bool f(int ind,int target, vector<int> &arr,vector<vector<int>>&dp){
      if(target==0) return true;
      if(ind==0) return arr[0]==target;
      if(dp[ind][target]!=-1) return dp[ind][target];
      bool notpick=f(ind-1,target,arr,dp);
      bool pick=false;
      if (arr[ind] <= target) {
        pick = f(ind - 1, target - arr[ind], arr, dp);
      }
      return dp[ind][target]=pick || notpick;
}

bool canPartition(vector<int> &arr, int n)
{
	int sum=0;
	for(int i=0;i<n;i++) sum+=arr[i];
	int p=sum/2;
	if(sum &2!=0) return false;
    vector<vector<int>>dp(n,vector<int>(p+1,-1));
    return f(n - 1, p, arr,dp);
}





#count subsets sum to k mem
#include <bits/stdc++.h> 
int mod=1e9+7;
int f(int ind,int target, vector<int> &arr,vector<vector<int>>&dp){
      if(target==0) return 1;
      if(ind==0){
		  return arr[0]==target;
	  }
      if(dp[ind][target]!=-1) return dp[ind][target];
      int notpick=f(ind-1,target,arr,dp);
      int pick=0;
      if (arr[ind] <= target) {
        pick = f(ind - 1, target - arr[ind], arr, dp);
      }
      return dp[ind][target]=(pick+notpick)%mod;
}

int findWays(vector<int>& arr, int k)
{
   int n=arr.size();
  vector<vector<int> >dp(n,vector<int>(k+1,-1));
  return f(n - 1, k, arr,dp);
}




#count partitions with difference mem
#include <bits/stdc++.h> 
int mod=1e9+7;
int f(int ind,int target, vector<int> &arr,vector<vector<int>>&dp){
      if(ind==0){
          if(target==0 && arr[0]==0) return 2;
          else if(target==0 || target==arr[0]) return 1;
          return 0;
      }
      if(dp[ind][target]!=-1) return dp[ind][target];
      int notpick=f(ind-1,target,arr,dp);
      int pick=0;
      if (arr[ind] <= target) {
        pick = f(ind - 1, target - arr[ind], arr, dp);
      }
      return dp[ind][target]=(pick+notpick)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int sum=0;
    for(int i=0;i<n;i++) sum+=arr[i];
    int p=(sum-d)/2;
    if(sum-d <0 || (sum-d)%2!=0) return false;
    vector<vector<int> >dp(n,vector<int>(p+1,-1));
    return f(n-1,p,arr,dp);
}




#Array partition with minimum difference space **********
#include <bits/stdc++.h> 
int minSubsetSumDifference(vector<int>& arr, int n)
{
	int sum=0;
  for(int i=0;i<n;i++) sum+=arr[i];
  int k=sum;
  vector<bool>prev(k+1,0),cur(k+1,0);
  prev[0]=cur[0]=true;
  prev[arr[0]]=true;
  for(int ind=1;ind<n;ind++){
    for(int target=1;target<=k/2;target++){
       bool notpick=prev[target];
       bool pick=false;
       if(arr[ind]<=target) pick=prev[target-arr[ind]];
       cur[target]=pick|| notpick;
    }
    prev=cur;
  }
   int mini=1e9;
  for(int s1=0;s1<=sum/2;s1++){
    if (prev[s1] == true) {
       mini = min(mini, abs((sum - s1) - s1));
    }
  }
  return mini;
}

####dp on subsequence pick and not pick







# 0/1 knapsack mem
#include <bits/stdc++.h> 
int f(int ind,int maxw,vector<int> weight, vector<int> value,vector<vector<int>>&dp){
    if(ind==0){
		if(weight[0]<=maxw){
			return value[0];
		}
		else{
			return 0;
		}
	}
	if(dp[ind][maxw]!=-1) return dp[ind][maxw];
	int notp=0+f(ind-1,maxw,weight,value,dp);
	int p=INT_MIN;
	if(weight[ind]<=maxw) p=value[ind]+f(ind-1,maxw-weight[ind],weight,value,dp);
	return dp[ind][maxw]=max(p,notp);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
	return f(n-1,maxWeight,weight,value,dp);
}









#minimum elements dpon subs mem
#include <bits/stdc++.h> 
int f(int ind,int tar,vector<int> &num,vector<vector<int>>&dp){
     if(ind==0){
         if(tar% num[0]==0) return tar/num[0];
         else return 1e9;
     }
     if(dp[ind][tar]!=-1) return dp[ind][tar];
     int notpick=0+f(ind-1,tar,num,dp);
     int pick=INT_MAX;
     if(tar>=num[ind]) pick=1+f(ind,tar-num[ind],num,dp);
     return dp[ind][tar]=min(pick,notpick);
}
int minimumElements(vector<int> &num, int x)
{
    int p=num.size();
    vector<vector<int>>dp(p,vector<int>(x+1,-1));
    int ans=f(p-1,x,num,dp);
    if(ans>=1e9) return -1;
     return ans;
}




#target sum mem
#include <bits/stdc++.h> 
int mod=1e9+7;
int f(int ind,int target, vector<int> &arr,vector<vector<int>>&dp){
      if(ind==0){
          if(target==0 && arr[0]==0) return 2;
          else if(target==0 || target==arr[0]) return 1;
          return 0;
      }
      if(dp[ind][target]!=-1) return dp[ind][target];
      int notpick=f(ind-1,target,arr,dp);
      int pick=0;
      if (arr[ind] <= target) {
        pick = f(ind - 1, target - arr[ind], arr, dp);
      }
      return dp[ind][target]=(pick+notpick)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int sum=0;
    for(int i=0;i<n;i++) sum+=arr[i];
    int p=(sum-d)/2;
    if(sum-d <0 || (sum-d)%2!=0) return false;
    vector<vector<int> >dp(n,vector<int>(p+1,-1));
    return f(n-1,p,arr,dp);
}
int targetSum(int n, int target, vector<int>& arr) {
    return countPartitions(n,target, arr);
}






#coin change 2 mem
#include<bits/stdc++.h>
long f(int ind,int tar,int *arr,vector<vector<long>> &dp){
    if(ind==0){
        return (tar % arr[0]==0);
    }
    if(dp[ind][tar]!=-1) return dp[ind][tar];
    long notpick=f(ind-1,tar,arr,dp);
    long pick=0;
    if(arr[ind]<=tar) pick=f(ind,tar-arr[ind],arr,dp);
    return dp[ind][tar]=pick+notpick;
}
long countWaysToMakeChange(int *denominations, int n, int value)
{
     vector<vector<long>>dp(n,vector<long>(value+1,-1));
     return f(n-1,value,denominations,dp);
}





#unbounded knapsack mem
#include<bits/stdc++.h>
int f(int ind,int maxw,vector<int>&value,vector<int>&weight,vector<vector<int>>&dp){
    if(ind==0){
       return ((int)(maxw/weight[0]))*value[0];
	}
	if(dp[ind][maxw]!=-1) return dp[ind][maxw];
	int notp=0+f(ind-1,maxw,value,weight,dp);
	int p=-1e9;
	if(weight[ind]<=maxw) p=value[ind]+f(ind,maxw-weight[ind],value,weight,dp);
	return dp[ind][maxw]=max(p,notp);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    vector<vector<int>>dp(n,vector<int>(w+1,-1));
    return f(n-1,w,profit,weight,dp);
}



#rod cutting mem
#include<bits/stdc++.h>
int f(int ind,int n,vector<int>&value,vector<vector<int>>&dp){
    if(ind==0){
       return (n * value[0]);
	}
	if(dp[ind][n]!=-1) return dp[ind][n];
	int notp=0+f(ind-1,n,value,dp);
	int p=-1e9;
	int rl=ind+1;
	if(rl<=n) p=value[ind]+f(ind,n-rl,value,dp);
	return dp[ind][n]=max(p,notp);
}

int cutRod(vector<int> &price, int n)
{
	vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return f(n-1,n,price,dp);
}